/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package passman;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.Random;

/**
 *
 * @author nicoa
 */
public class PasswordManager extends javax.swing.JFrame {

    /**
     * Creates new form PasswordManager
     */
    public PasswordManager() throws SQLException, ClassNotFoundException {
        initComponents();

        //Se nel db non esiste una tabella Gestore Passowrd la crea
        if (!connessionee.SeTabGPEsiste()) {
            connessionee.CreaTabGP();
        } else {
            caricaDatiTabella();
        }

        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bAggiungi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabella = new javax.swing.JTable();
        bElimina = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bDisconnettiti = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        pass_tf = new javax.swing.JPasswordField();
        nome_tf = new javax.swing.JTextField();
        GPRandom = new javax.swing.JButton();
        GP_tf = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome Utente: ");

        jLabel2.setText("Password:");

        bAggiungi.setText("Aggiungi");
        bAggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAggiungiActionPerformed(evt);
            }
        });

        Tabella.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome Utente", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabella);

        bElimina.setText("Elimina");
        bElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel3.setText("Gestore di Password");

        jLabel4.setText("Inserisci la tua password");

        bDisconnettiti.setText("Disconnettiti");
        bDisconnettiti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDisconnettitiActionPerformed(evt);
            }
        });

        jLabel5.setText("Oppure");

        GPRandom.setText("Genera una Password Random");
        GPRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPRandomActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Mostra Password");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bAggiungi, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                            .addComponent(pass_tf)
                            .addComponent(nome_tf)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLabel5))
                            .addComponent(bDisconnettiti, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jCheckBox1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(GPRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GP_tf))
                    .addComponent(jScrollPane1)
                    .addComponent(bElimina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nome_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pass_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1)
                        .addGap(46, 46, 46)
                        .addComponent(bAggiungi)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(bDisconnettiti))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bElimina)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GPRandom)
                    .addComponent(GP_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //facciamo in modo che vengano aggiunti i dati alla tabella e al db
    private void bAggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAggiungiActionPerformed

        if (!nome_tf.getText().trim().isEmpty() && !pass_tf.getText().trim().isEmpty()) {
            String nomeUt = nome_tf.getText().trim();
            String pass = pass_tf.getText().trim();

            try (Connection c = DriverManager.getConnection(connessionee.Jdbc);) {

                String query = "INSERT INTO gestorepassword (id, nomeutente, password) VALUES (?, ?, ?)";
                try (PreparedStatement st = c.prepareStatement(query)) {
                    // Ottieni l'ID massimo attuale dalla tabella
                    int id = IdMax(c);

                    DefaultTableModel m = (DefaultTableModel) Tabella.getModel();

                    st.setInt(1, id + 1);
                    st.setString(2, nomeUt);
                    st.setString(3, pass);

                    st.executeUpdate();

                    m.addRow(new Object[]{id + 1, nomeUt, pass});

                    id++;

                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswordManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Inserisci i campi");
        }


    }//GEN-LAST:event_bAggiungiActionPerformed

    //elimina le password salvate dalla tabella in base all'id
    private void bEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminaActionPerformed

        String idInput = JOptionPane.showInputDialog(null, "Qual è l'id della riga da eliminare? ");

        int id;
        try {
            id = Integer.parseInt(idInput);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "L'ID inserito non è valido.", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) Tabella.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            int tableId = (int) model.getValueAt(i, 0);
            if (tableId == id) {

                model.removeRow(i);

                String query = "DELETE FROM gestorepassword WHERE id = ?";
                try (Connection conn = DriverManager.getConnection(connessionee.Jdbc); PreparedStatement pstmt = conn.prepareStatement(query)) {

                    pstmt.setInt(1, id);

                    pstmt.executeUpdate();
                } catch (SQLException ex) {
                    ex.printStackTrace();

                }
                return;
            }
        }

        JOptionPane.showMessageDialog(null, "Nessuna riga corrisponde all'ID specificato.", "Errore", JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_bEliminaActionPerformed

    //generatore passowrd random
    private void GPRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPRandomActionPerformed
        // TODO add your handling code here:

        String maiusc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String minusc = "abcdefghijklmnopqrstuvwxyz";
        String n = "0123456789";
        String CarSpeciali = "<>,.?/}]{[+_-)(*&^%$#@!=";
        String combinazione = maiusc + minusc + n + CarSpeciali;
        int lunghezza = 8;
        char[] pass = new char[lunghezza];
        Random r = new Random();
        for (int i = 0; i < lunghezza; i++) {
            pass[i] = combinazione.charAt(r.nextInt(combinazione.length()));

        }
        String p = new String(pass);
        GP_tf.setText(p);

    }//GEN-LAST:event_GPRandomActionPerformed

    //appena si clicca "Disconnetti" si torna al login
    private void bDisconnettitiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDisconnettitiActionPerformed

        this.setVisible(false);
        Login l;
        try {
            l = new Login();
            l.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PasswordManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PasswordManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_bDisconnettitiActionPerformed

    //se il checkbox mostra password è selezionato mostra la password sennò la nasconde
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed

        if (jCheckBox1.isSelected()) {
            pass_tf.setEchoChar((char) 0);
        } else {
            pass_tf.setEchoChar('*');
        }

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PasswordManager().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(PasswordManager.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(PasswordManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void caricaDatiTabella() {
        DefaultTableModel modelloTabella = (DefaultTableModel) Tabella.getModel();
        modelloTabella.setRowCount(0); // Pulisce la tabella prima di aggiungere nuove righe

        String query = "SELECT * FROM gestorepassword";

        try (Connection conn = DriverManager.getConnection(connessionee.Jdbc); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String nomeUtente = rs.getString("nomeutente");
                String password = rs.getString("password");

                modelloTabella.addRow(new Object[]{id, nomeUtente, password});
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            // Gestione dell'errore
        }
    }

    //metodo per creare l'id massimo
    public int IdMax(Connection c) throws SQLException {
        int maxID = 0;
        String query = "SELECT MAX(id) FROM gestorepassword";
        try (Statement stat = c.createStatement()) {
            try (ResultSet rs = stat.executeQuery(query)) {
                if (rs.next()) {
                    maxID = rs.getInt(1);
                }
            }
        }
        return maxID;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GPRandom;
    private javax.swing.JTextField GP_tf;
    private javax.swing.JTable Tabella;
    private javax.swing.JButton bAggiungi;
    private javax.swing.JButton bDisconnettiti;
    private javax.swing.JButton bElimina;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nome_tf;
    private javax.swing.JPasswordField pass_tf;
    // End of variables declaration//GEN-END:variables
}
